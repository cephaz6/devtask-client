// src/pages/TaskPage.tsx

import { useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { fetchTaskById, addTaskComment, fetchTaskComments } from "@/lib/api";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Separator } from "@/components/ui/separator";
import {
  ArrowLeft,
  Calendar,
  MessageCircle,
  Plus,
  Trash2,
  Users,
  Tag,
  Edit, // Keep Edit for the header's Edit button
} from "lucide-react";
import { useAuth } from "@/context/AuthContext";
import type { CommentResponse, User, Task } from "@/types";

// Import new comment components
import CreateComment from "@/components/comments/CreateComment";
import Comment from "@/components/comments/Comment";

// Import new task components
import TaskDetailsCard from "@/components/task/TaskDetailsCard";

// Import helper functions
import {
  getUserInitials,
  organizeComments,
  getStatusConfig, // <-- RE-ADDED THIS IMPORT!
  formatDate,
  getDaysUntilDue,
  getDueDateEmoji,
  getDueDateText,
  getDueDateColor,
  getBorderColor,
} from "@/helpers/taskHelpers";

const TaskPage = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const taskId = location.pathname.split("/").pop() || "";
  const { user: authUser } = useAuth();
  const queryClient = useQueryClient();

  const {
    data: taskBase,
    isLoading: isLoadingTaskBase,
    error: errorTaskBase,
  } = useQuery<Task, Error>({
    queryKey: ["taskBase", taskId],
    queryFn: () => fetchTaskById(taskId),
    enabled: !!taskId,
    staleTime: 5 * 60 * 1000,
  });

  const {
    data: commentsWithUsers,
    isLoading: isLoadingCommentsWithUsers,
    error: errorCommentsWithUsers,
  } = useQuery<CommentResponse[], Error>({
    queryKey: ["taskComments", taskId],
    queryFn: () => fetchTaskComments(taskId),
    enabled: !!taskId,
    staleTime: 1 * 60 * 1000,
  });

  const task: Task | undefined = taskBase
    ? {
        ...taskBase,
        comments: commentsWithUsers || [],
      }
    : undefined;

  const isLoading = isLoadingTaskBase || isLoadingCommentsWithUsers;
  const error = errorTaskBase || errorCommentsWithUsers;

  const [newComment, setNewComment] = useState("");
  const [replyingTo, setReplyingTo] = useState<string | null>(null);
  const [collapsedComments, setCollapsedComments] = useState<Set<string>>(
    new Set()
  );

  const addCommentMutation = useMutation<
    CommentResponse,
    Error,
    { content: string; parentId: string | null }
  >({
    mutationFn: async ({ content, parentId }) => {
      const response = await addTaskComment({
        task_id: taskId,
        content,
        parent_comment_id: parentId,
      });
      console.log("Add Comment Mutation Response:", response);
      return response;
    },
    onSuccess: (newlyAddedComment) => {
      queryClient.invalidateQueries({ queryKey: ["taskBase", taskId] });
      queryClient.invalidateQueries({ queryKey: ["taskComments", taskId] });

      queryClient.setQueryData<CommentResponse[] | undefined>(
        ["taskComments", taskId],
        (oldComments) => {
          if (!oldComments) return [newlyAddedComment];

          const commentWithUserData: CommentResponse = {
            ...newlyAddedComment,
            user: newlyAddedComment.user || authUser,
          };

          return [...oldComments, commentWithUserData];
        }
      );

      setNewComment("");
      setReplyingTo(null);
    },
    onError: (err) => {
      console.error("Failed to add comment:", err);
      // TODO: Display a user-friendly error message
    },
  });

  const toggleCommentCollapse = (commentId: string) => {
    setCollapsedComments((prev) => {
      const newCollapsed = new Set(prev);
      if (newCollapsed.has(commentId)) {
        newCollapsed.delete(commentId);
      } else {
        newCollapsed.add(commentId);
      }
      return newCollapsed;
    });
  };

  const handleReplyInitiate = (commentId: string) => {
    setReplyingTo(commentId);
    setCollapsedComments((prev) => {
      const newCollapsed = new Set(prev);
      newCollapsed.delete(commentId);
      return newCollapsed;
    });
  };

  const handleSubmitRootComment = (content: string) => {
    addCommentMutation.mutate({ content, parentId: null });
  };

  const handleSubmitReply = (content: string, parentId: string) => {
    addCommentMutation.mutate({ content, parentId });
  };

  const handleCancelReply = () => {
    setReplyingTo(null);
  };

  if (!authUser) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <Card className="w-96">
          <CardContent className="p-6 text-center">
            <p className="text-muted-foreground">
              Please log in to view this task
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <Card className="w-64">
          <CardContent className="p-6 text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">Loading task... ‚è≥</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <Card className="w-96">
          <CardContent className="p-6 text-center">
            <p className="text-destructive">
              ‚ùå Error loading task: {error.message}
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!task) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <Card className="w-96">
          <CardContent className="p-6 text-center">
            <p className="text-muted-foreground">Task not found</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  const isOwner = authUser.user_id === task.owner_id;
  const comments = task.comments || [];
  const organizedComments = organizeComments(comments);
  const totalComments = comments.length;

  // The statusConfig for the header still needs to be computed here
  const statusConfigForHeader = getStatusConfig(task.status); // Add this line back

  const daysUntilDue = getDaysUntilDue(task.due_date);
  const dueDateEmoji = getDueDateEmoji(daysUntilDue);
  const dueDateText = getDueDateText(daysUntilDue);
  const dueDateColor = getDueDateColor(daysUntilDue);
  const borderColor = getBorderColor(daysUntilDue);

  return (
    <div className="min-h-screen bg-background">
      {/* Header - *NOT* YET extracted to TaskHeader component */}
      <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-sm border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button variant="ghost" size="icon" onClick={() => navigate(-1)}>
                <ArrowLeft className="h-4 w-4" />
              </Button>
              <div className="flex items-center gap-3">
                <div className="text-2xl">{statusConfigForHeader.icon}</div>{" "}
                {/* Use the icon from config */}
                <div>
                  <h1 className="text-2xl font-bold">{task.title}</h1>
                  <p className="text-sm text-muted-foreground">
                    #{task.id?.toString().slice(-8) || "Unknown"}
                  </p>
                </div>
              </div>
            </div>
            {isOwner && (
              <div className="flex gap-2">
                <Button variant="outline" size="sm">
                  <Edit className="h-4 w-4 mr-2" />
                  Edit
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  className="text-destructive"
                >
                  <Trash2 className="h-4 w-4 mr-2" />
                  Delete
                </Button>
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* CONSOLIDATED Task Details Card */}
            <TaskDetailsCard task={task} />

            {/* Tags - Remains here */}
            {task.tags && task.tags.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Tag className="h-5 w-5" />
                    Tags üè∑Ô∏è
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {task.tags.map((tag, index) => (
                      <Badge key={tag.id || index} variant="secondary">
                        #{tag.name}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Comments - Now using the new components */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <MessageCircle className="h-5 w-5" />
                  Comments üí¨ ({totalComments})
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Add new comment form - Using the CreateComment component */}
                <div className="border rounded-lg p-4 bg-muted/20">
                  <CreateComment
                    onSubmit={handleSubmitRootComment}
                    isSubmitting={
                      addCommentMutation.isPending && replyingTo === null
                    } // Only pending if it's the root comment form
                    placeholder="Write a new comment..."
                    initialContent={newComment} // Pass newComment to CreateComment
                    onCancel={() => setNewComment("")} // Allow cancelling root comment draft
                  />
                </div>

                <Separator />

                {/* Render threaded comments - Using the Comment component */}
                <div className="space-y-4">
                  {organizedComments.map((comment) => (
                    <Comment
                      key={comment.id}
                      comment={comment}
                      onReplyInitiate={handleReplyInitiate}
                      onToggleCollapse={toggleCommentCollapse}
                      isCollapsed={collapsedComments.has(comment.id)}
                      replyingToId={replyingTo}
                      onSubmitReply={handleSubmitReply}
                      isSubmittingReply={addCommentMutation.isPending}
                      onCancelReply={handleCancelReply}
                    />
                  ))}
                </div>

                {totalComments === 0 && (
                  <div className="text-center py-8 text-muted-foreground">
                    <MessageCircle className="h-12 w-12 mx-auto mb-2 opacity-50" />
                    <p>No comments yet. Be the first to comment! üí≠</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Sidebar - Keep your existing sidebar content */}
          <div className="space-y-6">
            {/* Due Date */}
            <Card className={borderColor}>
              {" "}
              {/* Use the helper for border color */}
              <CardHeader>
                <CardTitle className="text-sm flex items-center gap-2">
                  <Calendar className="h-4 w-4" />
                  Due Date {dueDateEmoji} {/* Use the helper for emoji */}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="font-medium">
                  {task.due_date ? formatDate(task.due_date) : "No due date"}
                </p>
                <p className={`text-sm ${dueDateColor}`}>
                  {" "}
                  {/* Use the helper for text color */}
                  {dueDateText} {/* Use the helper for text */}
                </p>
              </CardContent>
            </Card>

            {/* Assignees */}
            {task.assignments && task.assignments.length > 0 && (
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-sm flex items-center gap-2">
                      <Users className="h-4 w-4" />
                      Assignees üë•
                    </CardTitle>
                    {isOwner && (
                      <Button variant="ghost" size="sm">
                        <Plus className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                </CardHeader>
                <CardContent className="space-y-3">
                  {task.assignments.map((assignment) => (
                    <div
                      key={assignment.user_id}
                      className="flex items-center gap-3"
                    >
                      <Avatar>
                        <AvatarFallback>
                          {getUserInitials(assignment)}
                        </AvatarFallback>
                      </Avatar>
                      <div>
                        <p className="font-medium text-sm">
                          {assignment.full_name ||
                            assignment.email ||
                            "Unknown Assignee"}
                        </p>
                      </div>
                    </div>
                  ))}
                </CardContent>
              </Card>
            )}

            {/* Dependencies */}
            {task.dependencies && task.dependencies.length > 0 && (
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-sm">Dependencies üîó</CardTitle>
                    {isOwner && (
                      <Button variant="ghost" size="sm">
                        <Plus className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                </CardHeader>
                <CardContent className="space-y-2">
                  {task.dependencies.map((dep) => (
                    <div key={dep.id} className="border rounded-lg p-3">
                      <div className="flex items-center gap-2 mb-1">
                        {/* Note: Circle icon needed here still, not removed */}
                        <Circle className="h-4 w-4 text-yellow-500" />
                        <p className="font-medium text-sm">
                          {dep.title || `Dependency #${dep.id.slice(-8)}`}
                        </p>
                      </div>
                    </div>
                  ))}
                </CardContent>
              </Card>
            )}

            {/* Task Info */}
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">Task Info ‚ÑπÔ∏è</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Created:</span>
                  <span>{formatDate(task.created_at)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Updated:</span>
                  <span>{formatDate(task.updated_at)}</span>
                </div>
                {task.project_id && (
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Project ID:</span>
                    <span className="font-mono text-xs">
                      {task.project_id.toString().slice(-8)}
                    </span>
                  </div>
                )}
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Completed:</span>
                  <span>{task.is_completed ? "Yes ‚úÖ" : "No ‚ùå"}</span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TaskPage;
